name: SSM Run
description: "Send AWS-RunShellScript and wait for completion"

inputs:
  aws-region:
    description: "AWS region (e.g., eu-central-1)"
    required: true
  command:
    description: "Shell command to run on the instance(s)"
    required: true
  instance-id:
    description: "Single EC2 instance ID (mutually exclusive with targets)"
    required: false
  targets:
    description: "JSON array of SSM Targets (e.g., [{\"Key\":\"tag:Env\",\"Values\":[\"prod\"]}])"
    required: false

runs:
  using: "composite"
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install boto3
      shell: bash
      run: pip install --disable-pip-version-check --no-python-version-warning boto3

    - name: Run SSM command
      shell: bash
      env:
        AWS_REGION: ${{ inputs.aws-region }}
        INSTANCE_ID: ${{ inputs.instance-id }}
        TARGETS: ${{ inputs.targets }}
        COMMAND: ${{ inputs.command }}
      run: |
        python - <<'PY'
        import os, time, ast, boto3
        region = os.environ["AWS_REGION"]
        cmd    = os.environ["COMMAND"]
        inst   = os.environ.get("INSTANCE_ID")
        tgts   = os.environ.get("TARGETS")

        ssm = boto3.client("ssm", region_name=region)
        args = {"DocumentName": "AWS-RunShellScript",
                "Parameters": {"commands": [cmd]}}

        if inst:
            args["InstanceIds"] = [inst]
        elif tgts:
            # Expect JSON-like text; accept both JSON and Python-literal via ast
            args["Targets"] = ast.literal_eval(tgts)
        else:
            raise SystemExit("Provide either 'instance-id' or 'targets'")

        resp = ssm.send_command(**args)
        cid = resp["Command"]["CommandId"]

        term = {"Success","Failed","Cancelled","TimedOut"}
        while True:
            inv = ssm.list_command_invocations(CommandId=cid, Details=True)["CommandInvocations"]
            status = inv[0]["Status"] if inv else "Pending"
            if status in term:
                print(f"Status: {status}")
                raise SystemExit(0 if status == "Success" else 1)
            time.sleep(5)
        PY
