name: Test and Build

on:
    push:
        branches: 
            - main

            
jobs:
    Test-Build-e2e-publish:
        runs-on: self-hosted

        steps: 
            - name: Checkout Code
              uses: actions/checkout@v4
            
            # - name: Ensure aws & docker present
            #   run: |
            #     command -v aws || sudo apt-get update && sudo apt-get install -y awscli
            #     docker --version
            - uses: actions/setup-python@v5
              with:
                python-version: "3.12"
                cache: "pip"

            - name: Ensure pytest
              run: |
                        python -m pip install --upgrade pip
                        if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi
                        pip install -U pytest pytest-cov
                        python -m pytest --version


            - name: unit test app
              run: pytest -q


            - name: End-to-end test (compose)
              shell: bash
              run: |
                set -euo pipefail
                docker compose up -d --quiet-pull

                # Wait for the app to respond (retry up to ~2 minutes)
                for i in {1..60}; do
                if curl -fsS --max-time 2 http://localhost:5000 >/dev/null; then
                    echo "App is healthy ✅"
                    break
                fi
                echo "Waiting for app… ($i/60)"
                sleep 2
                done

                # Final check (fails the step if not healthy)
                curl -fsS http://localhost:5000

            - name: Dump logs on failure
              if: failure()
              run: |
                docker compose ps
                docker compose logs --no-color --timestamps

            - name: Teardown stack
              if: always()
              run: docker compose down -v --remove-orphans

            - name: Login to ECR (uses instance profile automatically)
              env:
                AWS_REGION: ap-south-1
              run: |
                REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com
                aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY
            


        